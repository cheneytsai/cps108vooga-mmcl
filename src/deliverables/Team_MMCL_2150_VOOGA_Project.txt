
Team MMCL : 2150 VOOGA Project

 

 Lisa Gutermuth

Megan Heysham

Cheney Tsai

Michael Yu

11/9/09

Project Overview

-Games




-The Viewer




-Actors




-Event Handler

Game Model




Drawer




GUI




Physics + Collisions




Event Handler




Actors




Actors

Abstract class for interactive items in game

Instance Variables: location, velocity, size, hasMoved...

 

     - Includes background objects, foreground objects, player object, counter objects, bounding boxes 




     - When object is created, instantiated with initial properties 




     - All user input is logged as a property of an actor 




examples: ball.java, paddle.java, player.java, powerup.java

-instantiated from resource file specific to game & level

Event Handler

- Contains map of conditions -» actions




- Reads current state of actors




- Actions include changing property of an actor, creating or deleting an actor, moving to next level, ending game ...







CollisionChecker

- Inefficient to compare every object to all other objects at each time step

 

- Check actors hasMoved property to weed out possible collisions first, hasMoved includes movement + creation/deletion

 

- Actors will have boundingShapes to simplify collisions, can be as precise or imprecise as you want




- Other considered solutions, divide screen into 4 quadrants actors will also contain information about which quadrant its in, and will only check for collision within each quadrant




The Viewer

Frame has a Canvas

-Canvas has an active class to decide what should be painted.




Types of Canvases:

--GameChooser

--GameMenu

--LevelViewer




Significant changes from our original design:

--Frame and Canvas now exist.

--We've realized that we should have a LevelViewer Controller, so  that the Model doesn't speak directly to the GameModel

Game Model

-Center of Structure-




- Does Time Step




- Key Listener on each Time Step =» alters actor property




- Sends actor data to EventHandler and receives updates to

game environment/actor 




-Example, EventHandler can modify actors location, velocity, active/inactive state, brick health, player health, score...




Games

Arkanoid - Typical block game with powerups, levels, collisions




Dukeopalypse - RPG/Zelda like - Concentrate on objects and properties




Third Game - Something Involving Networking. Still in the works, hopefully a game that can push the boundaries of what our model can handle.




Currently, Server is created. Clients connect to server to see other clients, and can connect to another client to initiate Chat. 

2 streams so input/output happen at the same time.

Chat will then become updates to gameModel

