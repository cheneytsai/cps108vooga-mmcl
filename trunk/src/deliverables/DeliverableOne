Team MMCL: 2150
Lisa Gutermuth, Megan Heysham, Cheney Tsai, Michael Yu
This is best viewed from our website, which provides images and appropriate text wrapping.

Deliverable One:

GUI Description:

The Main program will create a GameChooser.

A view package will contain at least the following:


The GameChooser class will be the starting view for the program.  It will allow a user to select which game to play, and 
there will also be a Quit option.  There will be a menu bar with a Quit option as well.  The process for quitting will be 
factored out so that the code is not repeated.  When a user selects a game to play, a game file is loaded relevant to the 
chosen game.  The types of game files will include (at the bare minimum) an image file (or text file with a color), an 
instruction file, a high score file, a file for each level, a physics file(s) (to handle collisions), an event file(s), and 
actor file(s).

For example, pressing Arkanoid will create a new instance of GameMenu with the String “Arkanoid” and the background file 
“arkanoid.background”.



The GameMenu class will load the image/color file as the background of the menu, and the title of the menu will become the 
name of the game that was chosen from the GameChooser menu.  All game menus will have the following menu choices: Play Game, 
Instructions, High Scores, Level Editor, Return to Main Menu, and Quit.  A menu bar will also give the Quit option.  If the 
Instructions or High Scores menu is selected, the corresponding gamename.instruction or gamename.highscore file will be 
loaded and displayed.  If the Play Game option is selected, level one will load.  If the Level Editor option is chosen, the 
level editor is displayed.

 

The LevelViewer class will first be called when a user selects Play Game from the GameMenu, and will then be called in the 
future when a level is completed.  It contains a menu bar with the options of New Game and Quit.  New Game returns the user 
to the GameMenu for the current game.  The LevelViewer will load the first level as soon as Play Game is selected (perhaps 
named gamename.level.1).  When the next level is loaded, a counter will increment, and the next level file (ex: 
gamename.level.2) will be loaded.  When a level is loaded the appropriate actors are created and placed in their starting 
positions.

The SubMenuViewer class is used to display the Instructions and High Scores.  It loads the gamename.menuoptionchosen file…so 
either gamename.instructions or gamename.highscores.  These files contain only Strings and will print the information 
contained in the selected file in an appropriate, formatted manner.  The menu bar will contain Quit and there will be an 
option on screen to Return to GameMenu.

The LevelEditorViewer will show the level editor.  We’re not quite sure how this is going to look yet.  One thing we do know 
is that will have a menu bar with a Quit option.  It will ideally provide options for changing the images of actors, keys 
used to play the game, and point values for the game.  It will allow for moving the actors from individual levels around, 
and will load the gamename.level.appropriatenumber file to edit, probably as selected from a menu.  It will also allow the 
user to save these options.

We are toying with the idea of having a Quit class so that the code for Quit is not repeated throughout the different view 
classes.

Model Description:

Game Model Classes (everything is quite tentative):

GameModel:
The role of GameModel is to coordinate between Actors, Physics, EventHandler, and the Drawer.
GameModel will include:
List of Actors
Physics object
EventHandler object
Drawer object

Behavior:

During each iteration of gametime, GameModel will first get a list of keys the user presses. Then it will call the act() 
method on each of its Actors using those keys as parameters. Then it will pass the list of Actors on to its Physics object’s 
handlePhysics method. Then it will pass the list of Actors to the EventHandler’s handleEvents method with the list of keys. 
Finally it will pass the list of Actors to the Drawer, which will draw the current frame of the game.

Actor:
The role of the Actor class is to store the state of and handle the behavior of individual objects in the game world.
Actor will include:
State information (Velocity, Acceleration, Position, Image, etc…)
Behavior information (Map of characters (keys pressed) -> Action objects)
Default behavior (probably some sort of loop Action)

Behavior:

Each iteration of gametime, an Actor object’s act() method will be called with a list of keys pressed by the user. The act 
method will first check to see if any of the keys pressed match the keys in its behavior map. If so, it will call any 
associated Action objects’ execute() method with itself as a parameter. It will also call the execute() method of its 
default Action.

Actor objects will only handle Actions which are independent of other Actors (hence it is not responsible for collisions or 
interactions involving collisions)

Action heirarchy:
The role of the Action classes are to handle state changing behavior for the game. Each Action class will simulate a 
different type of action (Move, Accelerate, SwapImage, CreateActor, RemoveActor, etc…)

Each Action subclass will have an execute() method which takes an Actor and performs its action on the Actor.

When an Action object is instantiated, it will be given parameters in its constructors specifying details of its specific 
action. For example, an Accelerate object would be instantiated with the magnitude of the acceleration as a parameter. Or a 
SwapImage action would be instantiated with the new image as a parameter.
Action objects will also contain methods to modify these values.

Physics:
The role of the Physics class will be the handle the physical interactions between Actors.

Physics will include:
A resource file with relevant physical information (gravity, friction, etc…)

Behavior:
Each iteration of game-time physics will receive a list of Actors. In the most basic case it will check for collisions among 
Actors. It will then use Action objects to handle any necessary physical interactions.

EventHandler:
EventHandler’s role is to handle special interactions and actions which are not handled by Physics or individual actors 
(changing the map, creating new Actors, removing Actors, etc…)

EventHandler will include:
A map of conditions -> Actions

Behavior:
Each iteration of game-time, EventHandler will take in a list of Actors and a list of keys pressed as arguments of its 
handleEvents() method. It will then check to see if any conditions have been met in  its event map, if so it will perform 
any associated Actions.

We’re still not exactly sure how we’ll implement the conditions. Perhaps a heirarchy of Condition classes (maybe subclass of 
Actions).

Drawer:
The role of the Drawer is to draw the current state of the game so the user can see it.

Drawer will include:
Two canvases (one for the current frame, one for the next)
Background image

Behavior:
Each iteration of game-time, Drawer will take in a list of Actors as an argument to its draw() method. It will then use the 
Actor’s image information to draw the Actors ontop of the background on its unused canvas. Then it will swap the canvases.

How we will handle changing a level

During the frame of the game where the ball hits the last brick. The GameModel will call act() on every Actor (presumably in 
this case that will just be the paddle, the ball, and the last brick). After all actors have updated their state, the 
EventHandler class will notice that one of its event conditions (a collision between a ball and a brick) has been fulfilled, 
and will perform the resulting Action which removes the brick. During the next frame of the game, the EventHandler will 
notice that another of its event conditions (no bricks remaining) has been fulfilled, and will perform the resulting action 
which will be a map change. The map change will either be performed by the EventHandler calling a mapChange() method in 
GameModel with the address of the new map’s resource file as an argument (the address will be mapped to the condition), or it 
will be performed by a MapChange action object which will call the mapChange() method in GameModel. When mapChange is called, 
GameModel will use information in the map file to reinitialize EventHandler, Physics, Drawer, and repopulate its list of 
Actors.